{"version":3,"sources":["components/Slices/Slices.js","components/Questions/Questions.js","components/Pie.js","App.js","reportWebVitals.js","index.js"],"names":["Slice","props","slices","Object","keys","map","sliceKey","i","transform","rotate","mask","className","cx","cy","r","fill","style","Questions","selectScore","questions","questionKey","question","onChange","type","min","max","value","replace","background","backgroundColor","borderRight","Pie","useState","1","2","3","4","5","6","7","8","data","setData","e","targetValue","target","newState","assign","width","height","viewBox","xmlns","id","x","y","d","fillRule","stroke","strokeWidth","xlinkHref","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.05a1b669.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Slice = (props) => {\n  let slices = Object.keys(props.slices).map((sliceKey, i) => (\n    <g key={sliceKey} transform={props.slices[sliceKey].rotate}>\n      <g mask=\"url(#wedge-mask)\">\n        <circle\n          className=\"Slice\"\n          cx=\"220\"\n          cy=\"220\"\n          r=\"200\"\n          fill={props.slices[sliceKey].fill}\n          style={{\n            transform: \"scale(\" + props.slices[sliceKey].transform + \")\",\n          }}\n        ></circle>\n      </g>\n    </g>\n  ));\n  return <>{slices}</>;\n};\n\nexport default Slice;\n","import React from \"react\";\nimport \"./Questions.css\";\n\nconst Questions = ({ slices ,selectScore}) => {\n  let questions = Object.keys(slices).map((questionKey, i) => (\n    <li key={i}>\n      <p>{slices[questionKey].question}</p>\n      <div className=\"Answer\">\n        <input\n          onChange={selectScore(questionKey)}\n          type=\"range\"\n          min=\"1\"\n          max=\"10\"\n          value={\n            slices[questionKey].transform === \"1\"\n              ? \"10\"\n              : slices[questionKey].transform.replace(\"0.\", \"\")\n          }\n          className=\"rangeInput\"\n          style={{ background: slices[questionKey].fill }}\n        />\n        <span\n          className=\"Score\"\n          style={{ backgroundColor: slices[questionKey].fill }}\n        >\n          <div\n            className=\"leftArrow\"\n            style={{\n              borderRight: \"5px solid \" + slices[questionKey].fill,\n            }}\n          ></div>\n          {slices[questionKey].transform === \"1\"\n            ? \"10\"\n            : slices[questionKey].transform.replace(\"0.\", \"\")}\n        </span>\n      </div>\n    </li>\n  ));\n  return <>{questions}</>;\n};\n\nexport default Questions;\n","import React, { useState } from \"react\";\nimport \"./Pie.css\";\nimport Slice from \"./Slices/Slices\";\nimport Questions from \"./Questions/Questions\";\n\nconst Pie = () => {\n  const [data, setData] = useState({\n    slices: {\n      1: {\n        question: \"Health\",\n        rotate: \"rotate(0.0000, 220, 220)\",\n        fill: \"#FF5C00\",\n        transform: \"1\",\n      },\n      2: {\n        question: \"Love life\",\n        rotate: \"rotate(45.0000, 220, 220)\",\n        fill: \"#9245FF\",\n        transform: \"1\",\n      },\n      3: {\n        question: \"Career\",\n        rotate: \"rotate(90.0000, 220, 220)\",\n        fill: \"#FF234B\",\n        transform: \"1\",\n      },\n      4: {\n        question: \"Personal growth\",\n        rotate: \"rotate(135.0000, 220, 220)\",\n        fill: \"#357AFF\",\n        transform: \"1\",\n      },\n      5: {\n        question: \"Money freedom\",\n        rotate: \"rotate(180.0000, 220, 220)\",\n        fill: \"#E5AC00\",\n        transform: \"1\",\n      },\n      6: {\n        question: \"Friends and family\",\n        rotate: \"rotate(225.0000, 220, 220)\",\n        fill: \"#00AB3A\",\n        transform: \"1\",\n      },\n      7: {\n        question: \"Fun and recreation\",\n        rotate: \"rotate(270.0000, 220, 220)\",\n        fill: \"#00A9B5\",\n        transform: \"1\",\n      },\n      8: {\n        question: \"Physical environment\",\n        rotate: \"rotate(315.0000, 220, 220)\",\n        fill: \"#E5AC00\",\n        transform: \"1\",\n      },\n    },\n  });\n\n  const selectScore = (question) => (e) => {\n    const targetValue = e.target.value === \"10\" ? \"1\" : \"0.\" + e.target.value;\n    const newState = Object.assign({}, data);\n    newState.slices[question].transform = targetValue;\n    setData(newState);\n  };\n\n  return (\n    <div className=\"Content\">\n      <div className=\"QuestionsBlock\">\n        <ul>\n          <Questions slices={data.slices} selectScore={selectScore} />\n        </ul>\n      </div>\n      <div className=\"ChartBlock\">\n        <div className=\"ChartPie\" style={{ width: \"450px\" }}>\n          <svg\n            className=\"ChartPieChunk\"\n            width=\"440px\"\n            height=\"440px\"\n            viewBox=\"0 0 440 440\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <defs>\n              <g id=\"overlay\">\n                <rect x=\"219\" y=\"20\" height=\"200\" width=\"2\" fill=\"#FFF\"></rect>\n                <g transform=\"translate(210, 10)\">\n                  <path fill=\"#000\"></path>\n                </g>\n              </g>\n            </defs>\n            <mask id=\"wedge-mask\" fill=\"white\">\n              <path\n                transform=\"translate(20, 20)\"\n                d=\"M93 7.241a200.006 200.006 0 01173.551-.865L200.004 200 112.33 20.241z\"\n                fillRule=\"nonzero\"\n              ></path>\n            </mask>\n            <circle\n              cx=\"220\"\n              cy=\"220\"\n              r=\"200\"\n              fill=\"#EFEFEF\"\n              stroke=\"#E3E3E3\"\n              strokeWidth=\"1\"\n            ></circle>\n            <Slice slices={data.slices} />\n            <use xlinkHref=\"#overlay\" transform=\"rotate(19, 220, 220)\"></use>\n            <use\n              xlinkHref=\"#overlay\"\n              transform=\"rotate(63.7143, 220, 220)\"\n            ></use>\n            <use\n              xlinkHref=\"#overlay\"\n              transform=\"rotate(108.7143, 220, 220)\"\n            ></use>\n            <use\n              xlinkHref=\"#overlay\"\n              transform=\"rotate(153.7143, 220, 220)\"\n            ></use>\n            <use\n              xlinkHref=\"#overlay\"\n              transform=\"rotate(198.7143, 220, 220)\"\n            ></use>\n            <use\n              xlinkHref=\"#overlay\"\n              transform=\"rotate(243.7143, 220, 220)\"\n            ></use>\n            <use\n              xlinkHref=\"#overlay\"\n              transform=\"rotate(288.7143, 220, 220)\"\n            ></use>\n            <use\n              xlinkHref=\"#overlay\"\n              transform=\"rotate(333.7143, 220, 220)\"\n            ></use>\n          </svg>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Pie;\n","import React from \"react\";\nimport \"./App.css\";\nimport Pie from \"./components/Pie\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pie />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}